name: Build

on:
  schedule:
    - cron: '0 10 * * *' # everyday at 10am
  push:
    branches:
      - '**'
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - 'master'

jobs:
  lint:
    runs-on: ubuntu-20.04

    steps:
    - name: Setup clj-kondo
      uses: DeLaGuardo/setup-clj-kondo@master
      with:
        version: '2021.08.06'

    - name: Check out Git repository
      uses: actions/checkout@v2

    - name: Lint
      run: make lint

  test:
    needs: [ lint ]

    strategy:
      max-parallel: 8
      matrix:
        module:
        - async
        - coll
        - cql
        - db
        - db-resource-store
        - db-resource-store-cassandra
        - db-tx-log
        - db-tx-log-kafka
        - executor
        - extern-terminology-service
        - fhir-client
        - fhir-path
        - fhir-structure
        - http-client
        - interaction
        - kv
        - luid
        - openid-auth
        - operation-measure-evaluate-measure
        - rest-api
        - rest-util
        - scheduler
        - search-param-registry

        java-version:
        - '11'
        - '16'

    runs-on: ubuntu-20.04

    steps:
    - name: Setup Java
      uses: actions/setup-java@v2
      with:
        distribution: 'temurin'
        java-version: ${{ matrix.java-version }}

    - name: Setup Clojure
      uses: DeLaGuardo/setup-clojure@master
      with:
        tools-deps: '1.10.3.943'

    - name: Check out Git repository
      uses: actions/checkout@v2

    - name: Cache Local Maven Repo
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-temurin-${{ matrix.java-version }}-maven-${{ matrix.module }}-${{ hashFiles(format('modules/{0}/deps.edn', matrix.module)) }}

    - name: Test
      run: make -C modules/${{ matrix.module }} test

  test-coverage:
    if: ${{ github.event_name != 'schedule' }}

    needs: [ test ]

    strategy:
      max-parallel: 2
      matrix:
        module:
        - async
        - coll
        - cql
        - db
        - db-resource-store
        - db-resource-store-cassandra
        - db-tx-log
        - db-tx-log-kafka
        - executor
        - extern-terminology-service
        - fhir-client
        - fhir-path
        - fhir-structure
        - http-client
        - interaction
        - kv
        - luid
        - openid-auth
        - operation-measure-evaluate-measure
        - rest-api
        - rest-util
        - scheduler
        - search-param-registry

    runs-on: ubuntu-20.04

    steps:
    - name: Setup Java
      uses: actions/setup-java@v2
      with:
        distribution: 'temurin'
        java-version: '16'

    - name: Setup Clojure
      uses: DeLaGuardo/setup-clojure@master
      with:
        tools-deps: '1.10.3.943'

    - name: Check out Git repository
      uses: actions/checkout@v2

    - name: Cache Local Maven Repo
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-temurin-16-maven-${{ matrix.module }}-${{ hashFiles(format('modules/{0}/deps.edn', matrix.module)) }}

    - name: Test Coverage
      run: make -C modules/${{ matrix.module }} test-coverage

    - name: Codecov Upload
      uses: codecov/codecov-action@v2
      with:
        name: ${{ matrix.module }}
        file: modules/${{ matrix.module }}/target/coverage/codecov.json
        fail_ci_if_error: true

  test-root:
    needs: [ lint ]

    strategy:
      matrix:
        java-version:
        - '11'
        - '16'

    runs-on: ubuntu-20.04

    steps:
    - name: Setup Java
      uses: actions/setup-java@v2
      with:
        distribution: 'temurin'
        java-version: ${{ matrix.java-version }}

    - name: Setup Clojure
      uses: DeLaGuardo/setup-clojure@master
      with:
        tools-deps: '1.10.3.943'

    - name: Check out Git repository
      uses: actions/checkout@v2

    - name: Cache Local Maven Repo
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-temurin-${{ matrix.java-version }}-maven-${{ hashFiles('deps.edn') }}

    - name: Test
      run: make test-root

  build:
    needs: [ test, test-root ]
    runs-on: ubuntu-20.04

    steps:
    - name: Setup Java
      uses: actions/setup-java@v2
      with:
        distribution: 'temurin'
        java-version: '16'

    - name: Setup Clojure
      uses: DeLaGuardo/setup-clojure@master
      with:
        tools-deps: '1.10.3.943'

    - name: Check out Git repository
      uses: actions/checkout@v2

    - name: Cache Local Maven Repo
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-temurin-16-maven-build-${{ hashFiles('**/deps.edn') }}

    - name: Build Uberjar
      run: make uberjar

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT }}

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Docker meta
      id: docker-meta
      uses: docker/metadata-action@v3
      with:
        images: |
          samply/blaze
          ghcr.io/samply/blaze
        tags: |
          type=schedule
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,format=long

    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.docker-meta.outputs.tags }}
        labels: ${{ steps.docker-meta.outputs.labels }}

    - name: Scan Container Image
      uses: azure/container-scan@v0
      with:
        image-name: ghcr.io/samply/blaze:sha-${{ github.sha }}

  integration-test:
    needs: build
    runs-on: ubuntu-20.04

    steps:
    - name: Check out Git repository
      uses: actions/checkout@v2

    - name: Setup Java
      uses: actions/setup-java@v2
      with:
        distribution: 'temurin'
        java-version: '16'

    - name: Setup Clojure
      uses: DeLaGuardo/setup-clojure@master
      with:
        tools-deps: '1.10.3.943'

    - name: Install Blazectl
      run: .github/scripts/install-blazectl.sh

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT }}

    - name: Pull Docker Image
      run: docker pull ghcr.io/samply/blaze:sha-${{ github.sha }}

    - name: Run Blaze
      run: docker run --name blaze -d -e JAVA_TOOL_OPTIONS=-Xmx2g -p 8080:8080 -v blaze-data:/app/data ghcr.io/samply/blaze:sha-${{ github.sha }}

    - name: Sleep 60s
      run: sleep 60

    - name: Docker Logs
      run: docker logs blaze

    - name: Check Capability Statement
      run: .github/scripts/check-capability-statement.sh

    - name: Load Data
      run: blazectl --server http://localhost:8080/fhir upload .github/test-data

    - name: Count Resources
      run: blazectl --server http://localhost:8080/fhir count-resources

    - name: Download Patient Resources
      run: .github/scripts/download-resources.sh Patient

    - name: Download Patient Resources - Including Observation, Condition, Encounter and Procedure
      run: .github/scripts/revinclude.sh

    - name: Download Observation Resources
      run: .github/scripts/download-resources.sh Observation

    - name: Download Observation Resources - Including Patients
      run: blazectl --server http://localhost:8080/fhir download -t Observation -q '_include=Observation:patient' -o Observation-Patient.ndjson

    - name: Download Observation Resources - Including Encounters and Patients
      run: blazectl --server http://localhost:8080/fhir download -t Observation -q '_include=Observation:encounter&_include=Observation:patient' -o Observation-Encounter-Patient.ndjson

    - name: Download Observation Resources - Including Encounters and Encounter Patients
      run: blazectl --server http://localhost:8080/fhir download -t Observation -q '_include=Observation:encounter&_include:iterate=Encounter:patient' -o Observation-Encounter-Encounter-Patient.ndjson

    - name: Download Condition Resources
      run: .github/scripts/download-resources.sh Condition

    - name: Download Condition Resources - Including Subjects
      run: blazectl --server http://localhost:8080/fhir download -t Condition -q '_include=Condition:subject' -o Condition-Subject.ndjson

    - name: Download Condition Resources - Including Encounters
      run: blazectl --server http://localhost:8080/fhir download -t Condition -q '_include=Condition:encounter' -o Condition-Encounter.ndjson

    - name: Download DiagnosticReport Resources
      run: .github/scripts/download-resources.sh DiagnosticReport

    - name: Download MedicationRequest Resources - Including Medications
      run: blazectl --server http://localhost:8080/fhir download -t MedicationRequest -q '_include=MedicationRequest:medication' -o MedicationRequest.ndjson

    - name: Evaluate CQL Query 1
      run: .github/scripts/evaluate-measure.sh modules/operation-measure-evaluate-measure/test/blaze/fhir/operation/evaluate_measure/q1-query.cql 56

    - name: Evaluate CQL Query 2
      run: .github/scripts/evaluate-measure.sh modules/operation-measure-evaluate-measure/test/blaze/fhir/operation/evaluate_measure/q2-query.cql 42

    - name: Evaluate CQL Query 7
      run: .github/scripts/evaluate-measure.sh modules/operation-measure-evaluate-measure/test/blaze/fhir/operation/evaluate_measure/q7-query.cql 81

    - name: Evaluate CQL Query 14
      run: .github/scripts/evaluate-measure.sh modules/operation-measure-evaluate-measure/test/blaze/fhir/operation/evaluate_measure/q14-query.cql 96

    - name: Forwarded Header
      run: .github/scripts/forwarded-header.sh

    - name: X-Forwarded Headers
      run: .github/scripts/x-forwarded-headers.sh

  openid-auth-test:
    needs: build
    runs-on: ubuntu-20.04

    steps:
    - name: Check out Git repository
      uses: actions/checkout@v2

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT }}

    - name: Run Keycloak and Blaze
      run: docker-compose -f .github/openid-auth-test/docker-compose.yml up -d

    - name: Sleep 90s
      run: sleep 90

    - name: Docker Logs Keycloak
      run: docker-compose -f .github/openid-auth-test/docker-compose.yml logs keycloak

    - name: Docker Logs Blaze
      run: docker-compose -f .github/openid-auth-test/docker-compose.yml logs blaze

    - name: Unauthenticated Request
      run: test "MSG_AUTH_REQUIRED" = "$(curl -s http://localhost:8080/fhir | jq -r .issue[0].details.coding[0].code)"

    - name: Authenticated Request
      run: .github/scripts/authenticated-request.sh

  distributed-test:
    needs: build
    runs-on: ubuntu-20.04

    steps:
    - name: Check out Git repository
      uses: actions/checkout@v2

    - name: Setup Java
      uses: actions/setup-java@v2
      with:
        distribution: 'temurin'
        java-version: '16'

    - name: Setup Clojure
      uses: DeLaGuardo/setup-clojure@master
      with:
        tools-deps: '1.10.3.943'

    - name: APT Update
      run: sudo apt-get update

    - name: Install Gnuplot
      run: sudo apt-get install gnuplot

    - name: Install Blazectl
      run: .github/scripts/install-blazectl.sh

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT }}

    - name: Run Zookeeper, Kafka, Cassandra and Blaze
      run: docker-compose -f .github/distributed-test/docker-compose.yml up -d

    - name: Sleep 2 Minutes
      run: sleep 120

    - name: Docker Logs Zookepper
      run: docker-compose -f .github/distributed-test/docker-compose.yml logs zookeeper

    - name: Docker Logs Kafka
      run: docker-compose -f .github/distributed-test/docker-compose.yml logs kafka

    - name: Docker Logs Cassandra 1
      run: docker-compose -f .github/distributed-test/docker-compose.yml logs cassandra-1

    - name: Docker Logs Cassandra 2
      run: docker-compose -f .github/distributed-test/docker-compose.yml logs cassandra-2

    - name: Docker Logs Blaze
      run: docker-compose -f .github/distributed-test/docker-compose.yml logs blaze

    - name: Docker Stats
      run: docker stats --no-stream

    - name: Check Capability Statement
      run: .github/scripts/check-capability-statement.sh

    - name: Load Data
      run: blazectl --server http://localhost:8080/fhir upload .github/test-data

    - name: Count Resources
      run: blazectl --server http://localhost:8080/fhir count-resources

    - name: Download Patient Resources
      run: .github/scripts/download-resources.sh Patient

    - name: Download Patient Resources - Including Observation, Condition, Encounter and Procedure
      run: .github/scripts/revinclude.sh

    - name: Download Observation Resources
      run: .github/scripts/download-resources.sh Observation

    - name: Download Observation Resources - Including Patients
      run: blazectl --server http://localhost:8080/fhir download -t Observation -q '_include=Observation:patient' -o Observation-Patient.ndjson

    - name: Download Observation Resources - Including Encounters and Patients
      run: blazectl --server http://localhost:8080/fhir download -t Observation -q '_include=Observation:encounter&_include=Observation:patient' -o Observation-Encounter-Patient.ndjson

    - name: Download Observation Resources - Including Encounters and Encounter Patients
      run: blazectl --server http://localhost:8080/fhir download -t Observation -q '_include=Observation:encounter&_include:iterate=Encounter:patient' -o Observation-Encounter-Encounter-Patient.ndjson

    - name: Download Condition Resources
      run: .github/scripts/download-resources.sh Condition

    - name: Download Condition Resources - Including Subjects
      run: blazectl --server http://localhost:8080/fhir download -t Condition -q '_include=Condition:subject' -o Condition-Subject.ndjson

    - name: Download Condition Resources - Including Encounters
      run: blazectl --server http://localhost:8080/fhir download -t Condition -q '_include=Condition:encounter' -o Condition-Encounter.ndjson

    - name: Download DiagnosticReport Resources
      run: .github/scripts/download-resources.sh DiagnosticReport

    - name: Download MedicationRequest Resources - Including Medications
      run: blazectl --server http://localhost:8080/fhir download -t MedicationRequest -q '_include=MedicationRequest:medication' -o MedicationRequest.ndjson

    - name: Evaluate CQL Query 1
      run: .github/scripts/evaluate-measure.sh modules/operation-measure-evaluate-measure/test/blaze/fhir/operation/evaluate_measure/q1-query.cql 56

    - name: Evaluate CQL Query 2
      run: .github/scripts/evaluate-measure.sh modules/operation-measure-evaluate-measure/test/blaze/fhir/operation/evaluate_measure/q2-query.cql 42

    - name: Evaluate CQL Query 7
      run: .github/scripts/evaluate-measure.sh modules/operation-measure-evaluate-measure/test/blaze/fhir/operation/evaluate_measure/q7-query.cql 81

    - name: Evaluate CQL Query 14
      run: .github/scripts/evaluate-measure.sh modules/operation-measure-evaluate-measure/test/blaze/fhir/operation/evaluate_measure/q14-query.cql 96

    - name: Forwarded Header
      run: .github/scripts/forwarded-header.sh

    - name: X-Forwarded Headers
      run: .github/scripts/x-forwarded-headers.sh

    - name: Docker Stats
      run: docker stats --no-stream
